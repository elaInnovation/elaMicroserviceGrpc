syntax = "proto3";

package ElaSmili;

// import

import "Protos/Wirepas/ElaWirepasPublicAPI.proto";

// SMILI requests service definition. handles all requests interoperability
service ElaSmiliRequestService {

  // request functions for all streamable data for example: localization request to EPE, rawdata request to handler miroservices etc. and unary calls such as request to stop data/results flow
	rpc GetResults(ElaSmiliDataPacket) returns (stream ElaSmiliDataPacket) {}  // request of results to epe returns stream of results
	rpc StopResults(ElaSmiliDataPacket) returns (ElaSmiliError) {}  // request to stop results from epe returns ElaSmiliError with status
	rpc GetData(ElaSmiliDataPacket) returns (stream ElaSmiliDataPacket) {} // request of raw data to handler services returns stream of raw data
	rpc StopData(ElaSmiliDataPacket) returns (ElaSmiliError) {}  // request to stop data to epe returns ElaSmiliError with status
	rpc UpdateConfigs(ElaSmiliRequest) returns (ElaSmiliError) {}  // request to update configurations to epe returns ElaSmiliError with status
	rpc GetStatus(ElaSmiliRequest) returns (SmiliStatus) {}  // request to get Positioning Engine status
}

///////////////////////////////////////////////////////////
/*
 * \class ElaSmiliDataPacket
 * \brief interoperable SMILI datapacket discription 
 */
message ElaSmiliDataPacket {
	ElaSmiliRequest smili_request = 1;
	ElaWirepas.ElaWirepasDataPacket wirepas_data = 2;
	SmiliNodeModel node_packet = 3;
	ElaSmiliError error = 4;
}

message ElaSmiliError{

	ErrCode error_code = 1;

    enum ErrCode{
	    OK = 0;
		KO = 1;
		NOTHINGTOFETCH = 2;
	}
}

///////////////////////////////////////////////////////////
/*
 * \class ElaSmiliRequest
 * \brief SMILI request discription 
 */
message ElaSmiliRequest {

    int32 smili_request_id = 1; 
	int32 smili_user_id = 2;
    ReqType smili_request_type = 3;    
	
	repeated RequestDestination destinations = 4;	
	ElaSmiliConfigRequest smili_config_request = 5;

	enum ReqType{
		DATA = 0;
		RESULTS = 1;
		CONFIG = 3; //!
		STATUS = 4;
	}
}


message RequestDestination{

     	string req_destination_adress = 1;
	    int32 req_destination_port = 2;
		DestType DestinationType=3;
		

		enum DestType{
			SELF = 0; // data acquizition on the same device
			MQTTBROKER = 1; // remote MQTT broker
			BLUETOOTHMASTER = 2;
			SERVICE = 3;
		}
}

///////////////////////////////////////////////////////////
/*
 * \class ElaSmiliConfigRequest
 * \brief SMILI request discription 
 */
message ElaSmiliConfigRequest {
       
	ProjectItem smili_project_item = 1;
	repeated SmiliNodeModel nodes_list = 2;
	string cali_config_json = 3;
	ReqStat request_status = 4;
	string client_id = 5;

	enum ReqStat{
	NEW = 0; // new GUI instance with new configs
	REFRESH = 1; // 
	FETCH = 2;
	UPDATE = 3;
	}
}




/*
 * \class SmiliNodeModel
 * \brief description of a smili result packet
 */  

message SmiliNodeModel {
    
	ElaSmiliNodeItem node_item = 1;
    string x_coordinate = 2;
	string y_coordinate = 3;
	string z_coordinate = 4;
	string floor = 5;
	string battery = 6;
	string sensor_value = 7;
	string time_stamp = 8;
	string environment = 9;
}

/*
 * \class ElaSmiliNodeItem
 * \brief description of a node information item
 */
message ElaSmiliNodeItem {

	string node_address = 1;
	string local_name = 2;
    SmiliNodeType smili_node_type = 3;
	SmiliTech smili_technology = 4;
	string name2 = 5;

	enum SmiliNodeType{
		ANCHOR = 0;
		TAG = 1;
		UNKNOWNTYPE = 100;
	}
}



	enum SmiliTech{
		WIREPAS = 0;
		BLUETOOTH = 1;
		MULTITECH = 2;
		UNKNOWNTECH = 100;
	}


/*
 * \class SmiliStatus
 * \brief description of a status information message
 */
message SmiliStatus {

	string smili_user_id = 1;
	string smili_service_id = 2;
	Stat smili_status_code = 3;
	string smili_status_timestamp = 4;
	repeated ProjectItem projects_list = 5;
	
	enum Stat{
	AVAILABLE = 0;
	NOCONFIGS = 1;
	ONLINE = 2;
	}
}

/*
 * \class ProjectItem
 * \brief description of a project data
 */  

message ProjectItem {
    
    int32 smili_project_id = 1;
	string smili_project_name = 2;
	SmiliTech smili_technology = 3;
}
