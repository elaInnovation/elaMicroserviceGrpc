syntax = "proto3";

package ElaSmili;

// import

import "Protos/Wirepas/ElaWirepasPublicAPI.proto";

// SMILI requests service definition. handles all requests interoperability
service ElaSmiliRequestService {

  // request functions for all streamable data for example: localization request to EPE, rawdata request to handler miroservices etc.
	rpc GetResults(ElaSmiliDataPacket) returns (stream ElaSmiliDataPacket) {}  // request of results to epe returns stream of results
	rpc GetData(ElaSmiliDataPacket) returns (stream ElaSmiliDataPacket) {} // request of raw data to handler services returns stream of raw data
}


///////////////////////////////////////////////////////////
/*
 * \class ElaSmiliDataPacket
 * \brief interoperable SMILI datapacket discription 
 */
message ElaSmiliDataPacket {
	ElaSmiliRequest smili_request = 1;
	ElaWirepas.ElaWirepasDataPacket wirepas_data = 2;
	ElaBleDataPacket ble_data = 3;
	ElaResultPacket result_packet = 4;
}

///////////////////////////////////////////////////////////
/*
 * \class ElaSmiliRequest
 * \brief SMILI request discription 
 */
message ElaSmiliRequest {

    int32 smili_request_id = 1; 
	int32 smili_user_id = 2;
    ReqType smili_request_type = 3;    
	
	RequestDestination req_destination = 4;	
	ElaSmiliConfigRequest smili_config_request = 5;
	//ElaSmiliAdvertisementRequest smiliAdvertisementRequest = 6;   // manage advertisement request with BLE microservice
	//ElaSmiliAuthenticationRequest authReq = 7;

	enum ReqType{
		DATA = 0;
		RESULTS = 1;
		CONFIG = 3; //!
	}
}


message RequestDestination{

     	string req_destination_adress = 1;
	    int32 req_destination_port = 2;
		DestType DestinationType=3;
		

		enum DestType{
			SELF = 0; // data acquizition on the same device
			MQTTBROKER = 1; // remote MQTT broker
			SERVICE = 2;
		}

}

///////////////////////////////////////////////////////////
/*
 * \class ElaSmiliConfigRequest
 * \brief SMILI request discription 
 */
message ElaSmiliConfigRequest {
       
	int32 smili_project_id = 1;
	repeated SmiliAnchorModel anchors_list = 2;
	string cali_config_json = 3;
	ReqStat request_status = 4;

	enum ReqStat{
	NEW = 0; // new GUI instance with new configs
	REFRESH = 1; // 
	FETCH = 2;
	UPDATE = 3;
	}
}

message SmiliAnchorModel {
    
	uint32 node_address = 1;
    double x_coordinate = 2;
	double y_coordinate = 3;
	double z_coordinate = 4;
	string floor = 5;
	string technology = 6;
	string environment = 7;
}


///////////////////////////////////////////////////////////
/*
 * \class ElaBleDataPacket
 * \brief interoperable ELA datapacket discription 
 */
message ElaBleDataPacket {

	string DataType = 1; // 

	ElaBleSensorDataItem bleSensorData = 2;
	ElaBleLocationDataItem bleLocData = 3;

	uint32 VBat = 4;
	string TimeStamp = 5;
}

message ElaBleSensorDataItem{

}




/*
 * \class ElaResultPacket
 * \brief description of a smili result packet
 */  

message ElaResultPacket {
    
	ElaSmiliNodeItem node_item = 1;
    double x_coordinate = 2;
	double y_coordinate = 3;
	double z_coordinate = 4;
	string floor = 5;
	double battery = 6;
	string sensor_value = 7;
}

/*
 * \class ElaSmiliNodeItem
 * \brief description of a node information item
 */
message ElaSmiliNodeItem {

	uint32 node_address = 1;
	string local_name = 2;
    SmiliNodeType smili_node_type = 3;
	SmiliTech smili_technology = 4;

	enum SmiliNodeType{
		ANCHOR = 0;
		TAG = 1;
		UNKNOWN = 2;
	}

	enum SmiliTech{
		WIREPAS = 0;
		BLUETOOTH = 1;
	}
}

message ElaBleLocationDataItem {
    
	ElaBleNodeItem bleNode_item = 1;
    repeated ElaBleNodeLocData ble_Loc_node_data = 2;
}

/*
 * \class ElaBleNodeLocData
 * \brief description of a location data for BLE node
 */  

message ElaBleNodeLocData {
    
	uint32 node_address = 1;
	int32 bleRssi = 2;
}





/*
 * \class ElaBleNodeItem
 * \brief description of a Ble node information item
 */
message ElaBleNodeItem {

	uint32 node_address = 1;
	string node_role = 2;
	string local_name = 3;
    string node_type = 4;
	//todo unique Ble data
}

/*
 * \class Status
 * \brief description of a status information message
 */
message Status {

	string smili_user_id = 1;
	string smili_service_id = 2;
	Stat smili_status_code = 3;
	string smili_status_timestamp = 4;

	enum Stat{
	AVAILABLE = 0;
	UNAVAILABLE = 1;
	RESTARTED = 2;
	STOPPED = 3;
	}
}
