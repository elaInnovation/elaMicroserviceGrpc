syntax = "proto3";

package ElaSmili;

// import

import "Protos/Wirepas/ElaWirepasPublicAPI.proto";
import "Protos/Common/ElaCommon.proto";
import "Protos/Authentication/ElaAuthenticationCommon.proto";

// SMILI requests service definition. handles all requests interoperability
service ElaSmiliRequestService {
	rpc Connect (ElaAuthentication.ElaAuthenticationRequest) returns (ElaAuthentication.ElaAuthenticationResponse) {}
	rpc Disconnect(ElaCommon.ElaInputBaseRequest) returns (ElaCommon.ElaError) {}

    // request functions for all streamable data for example: localization request to EPE, rawdata request to handler miroservices etc. and unary calls such as request to stop data/results flow
	rpc GetResults(ElaSmiliRequest) returns (stream ElaSmiliDataPacket) {}  // request of results to epe returns stream of results
	rpc StopResults(ElaCommon.ElaInputBaseRequest) returns (ElaCommon.ElaError) {}  // request to stop results from epe returns ElaError with status
	rpc UpdateConfigs(ElaSmiliRequest) returns (ElaCommon.ElaError) {}  // request to update configurations to epe returns ElaError with status
	rpc GetStatus(ElaSmiliStatusRequest) returns (SmiliStatus) {}  // request to get Positioning Engine status
}

///////////////////////////////////////////////////////////
/*
 * \class ElaSmiliDataPacket
 * \brief interoperable SMILI datapacket description 
 */
message ElaSmiliDataPacket {
	ElaSmiliRequest smili_request = 1;
	SmiliNodeModel node_packet = 2;
	ElaCommon.ElaError error = 3;
}

///////////////////////////////////////////////////////////
/*
 * \class ElaSmiliRequest
 * \brief SMILI request discription 
 */
message ElaSmiliRequest {

	ElaCommon.ElaInputBaseRequest request = 1;
    ReqType smili_request_type = 2;  
	ElaSmiliConfigRequest smili_config_request = 3;
}

enum ReqType {
		DATA = 0;
		RESULTS = 1;
		CONFIG = 3; //!
		STATUS = 4;
}

///////////////////////////////////////////////////////////
/*
 * \class ElaSmiliConfigRequest
 * \brief SMILI request discription 
 */
message ElaSmiliConfigRequest {
       
	ProjectItem smili_project_item = 1;
	string cali_config_json = 2;
	ReqStat request_status = 3;
	string ertls_project_json = 4;

	enum ReqStat {
		NEW = 0; // new GUI instance with new configs
		REFRESH = 1; // 
		FETCH = 2;
		UPDATE = 3;
	}
}

/*
 * \class ElaSmiliStatusRequest
 * \brief SMILI request description 
 */
message ElaSmiliStatusRequest {
       
	string user_login = 1;
	ReqType smili_request_type = 2;  
}


/*
 * \class SmiliNodeModel
 * \brief description of a smili result packet
 */  

message SmiliNodeModel {
    
	ElaSmiliNodeItem node_item = 1;
    string x_coordinate = 2;
	string y_coordinate = 3;
	string z_coordinate = 4;
	string floor = 5;
	string battery = 6;
	string sensor_value = 7;
	string time_stamp = 8;
	string environment = 9;
}

/*
 * \class ElaSmiliNodeItem
 * \brief description of a node information item
 */
message ElaSmiliNodeItem {

	string id = 1; // MAC address for bluetooth, node address for Wirepas
	string local_name = 2;
    SmiliNodeType smili_node_type = 3;
	SmiliTech smili_technology = 4;
	string host_name = 5; //for ble base anchor
	uint32 network_id = 6;

	enum SmiliNodeType {
		ANCHOR = 0;
		TAG = 1;
		UNKNOWNTYPE = 100;
	}
}



enum SmiliTech {
	WIREPAS = 0;
	BLUETOOTH = 1;
	MULTITECH = 2;
	UNKNOWNTECH = 100;
}


/*
 * \class SmiliStatus
 * \brief description of a status information message
 */
message SmiliStatus {

	string smili_user_id = 1;
	string smili_service_id = 2;
	Stat smili_status_code = 3;
	string smili_status_timestamp = 4;
	repeated ProjectItem projects_list = 5;
	repeated string ertls_project_json_list = 6;
	ElaCommon.ElaError ela_error = 7;
	
	enum Stat{
	AVAILABLE = 0;
	NOCONFIGS = 1;
	ONLINE = 2;
	}
}

/*
 * \class ProjectItem
 * \brief description of a project data
 */  

message ProjectItem {   
    string smili_project_id = 1;
	string smili_project_name = 2;
	SmiliTech smili_technology = 3;
	repeated SmiliNodeModel nodes = 4;
	repeated RequestDestination destinations = 5;
	string owner_login = 6;
}

message RequestDestination {

    string req_destination_adress = 1;
	int32 req_destination_port = 2;
	string req_broker_adress = 3;
	int32 req_broker_port = 4;
	DestType destination_type = 5;	

	enum DestType {
		SELF = 0; // data acquizition on the same device
		BLUETOOTHMASTER = 1;
		WIREPASBASE = 2;
		SERVICE = 3;
	}
}
