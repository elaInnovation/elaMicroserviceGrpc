syntax = "proto3";

package Ertls;

// import

import "Protos/Common/ElaCommon.proto";
import "Protos/Authentication/ElaAuthenticationCommon.proto";

// eRTLS requests service definition. handles all requests interoperability
service ErtlsPublicService {
	rpc Connect (ElaAuthentication.ElaAuthenticationRequest) returns (ElaAuthentication.ElaAuthenticationResponse) {}
	rpc Disconnect(ElaCommon.ElaInputBaseRequest) returns (ElaCommon.ElaError) {}

    // request functions for all streamable data for example: localization request to EPE, rawdata request to handler miroservices etc. and unary calls such as request to stop data/results flow
	rpc GetResults(ErtlsLocalizationRequest) returns (stream ErtlsDataPacket) {}  // request of results to epe returns stream of results
	//rpc StopResults(ElaCommon.ElaInputBaseRequest) returns (ElaCommon.ElaError) {}  // request to stop results from epe returns ElaError with status
	
	rpc GetProjects(ElaCommon.ElaInputBaseRequest) returns (ErtlsProjectsResponse) {}
	rpc UploadProject(ErtlsProjectUploadRequest) returns (ElaCommon.ElaError) {}
	rpc RemoveProject(ErtlsProjectRemoveRequest) returns (ElaCommon.ElaError) {}
	
	rpc UploadPlan(stream ErtlsFileChunk) returns (ElaCommon.ElaError) {}
	rpc DownloadPlan(ErtlsPlanRequest) returns (stream ErtlsFileChunk) {}
	rpc RemovePlan(ErtlsPlanRequest) returns (ElaCommon.ElaError) {}
	
	rpc GetVersion(ElaCommon.ElaInputBaseRequest) returns (ErtlsEngineVersion) {} 
}

///////////////////////////////////////////////////////////
/*
 * \class ErtlsDataPacket
 * \brief interoperable eRTLS datapacket description 
 */
message ErtlsDataPacket {
	string node_json = 1;
	ElaCommon.ElaError error = 2;
	ElaCommon.ElaCloseStreamingRequest closeStreamingRequest = 3;
}

///////////////////////////////////////////////////////////
/*
 * \class ErtlsLocalizationRequest
 * \brief eRTLS request discription 
 */
message ErtlsLocalizationRequest {

	ElaCommon.ElaInputBaseRequest request = 1;
	string localization_project_json = 2;
}

enum ReqType {
	DATA = 0;
	RESULTS = 1;
	CONFIG = 2; //!
	STATUS = 3;
	VERSION = 4;
}

///////////////////////////////////////////////////////////
/*
 * \class ErtlsConfigRequest
 * \brief ERTLS request discription 
 */
message ErtlsConfigRequest {
	string cali_config_json = 1;
	ReqStat request_status = 2;
	string ertls_project_json = 3;

	enum ReqStat {
		NEW = 0; // new GUI instance with new configs
		REFRESH = 1; // 
		FETCH = 2;
		UPDATE = 3;
	}
}


message ErtlsProjectsResponse {
	ElaCommon.ElaError error = 1;
	repeated string ertls_project_json_list = 2;
}

message ErtlsProjectUploadRequest {
	ElaCommon.ElaInputBaseRequest request = 1;
	string ertls_project_json = 2;
}

message ErtlsProjectRemoveRequest {
	ElaCommon.ElaInputBaseRequest request = 1;
	string project_id = 2;
}

message ErtlsFileChunk {
	/*ElaCommon.ElaInputBaseRequest request = 1;	
	string file_name = 2;*/
	bytes data = 1;
	ElaCommon.ElaError error = 2;
}

message ErtlsPlanRequest {
	ElaCommon.ElaInputBaseRequest request = 1;
	string file_name = 2;
}

/*
 * \class ErtlsStatusRequest
 * \brief eRTLS request description 
 */
message ErtlsStatusRequest {
       
	string user_login = 1;
	ReqType ertls_request_type = 2;  
}


enum ErtlsNodeType {
	ANCHOR = 0;
	TAG = 1;
	UNKNOWNTYPE = 100;
}


enum ErtlsTech {
	WIREPAS = 0;
	BLUETOOTH = 1;
	MULTITECH = 2;
	BLUETOOTH_5_1 = 3;
	LF_RFID = 4;
	UWB_TWR = 5;
	UNKNOWNTECH = 100;
}

message ErtlsEngineVersion {
	string epe_version = 1;
	ElaCommon.ElaError error = 2;
}
