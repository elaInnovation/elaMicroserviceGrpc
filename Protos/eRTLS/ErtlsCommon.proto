syntax = "proto3";

package Ertls;

// import

import "Protos/Wirepas/ElaWirepasPublicAPI.proto";
import "Protos/Common/ElaCommon.proto";
import "Protos/Authentication/ElaAuthenticationCommon.proto";

// eRTLS requests service definition. handles all requests interoperability
service ErtlsRequestService {
	rpc Connect (ElaAuthentication.ElaAuthenticationRequest) returns (ElaAuthentication.ElaAuthenticationResponse) {}
	rpc Disconnect(ElaCommon.ElaInputBaseRequest) returns (ElaCommon.ElaError) {}

    // request functions for all streamable data for example: localization request to EPE, rawdata request to handler miroservices etc. and unary calls such as request to stop data/results flow
	rpc GetResults(ErtlsRequest) returns (stream ErtlsDataPacket) {}  // request of results to epe returns stream of results
	rpc UpdateConfigs(ErtlsRequest) returns (ElaCommon.ElaError) {}  // request to update configurations to epe returns ElaError with status
	rpc GetStatus(ErtlsStatusRequest) returns (ErtlsStatus) {}  // request to get Positioning Engine status
}

///////////////////////////////////////////////////////////
/*
 * \class ErtlsDataPacket
 * \brief interoperable eRTLS datapacket description 
 */
message ErtlsDataPacket {
	string node_json = 1;
	ElaCommon.ElaError error = 2;
}

///////////////////////////////////////////////////////////
/*
 * \class ErtlsRequest
 * \brief eRTLS request discription 
 */
message ErtlsRequest {

	ElaCommon.ElaInputBaseRequest request = 1;
    ReqType ertls_request_type = 2;  
	ErtlsConfigRequest ertls_config_request = 3;
}

enum ReqType {
	DATA = 0;
	RESULTS = 1;
	CONFIG = 2; //!
	STATUS = 3;
	VERSION = 4;
}

///////////////////////////////////////////////////////////
/*
 * \class ErtlsConfigRequest
 * \brief ERTLS request discription 
 */
message ErtlsConfigRequest {
	string cali_config_json = 1;
	ReqStat request_status = 2;
	string ertls_project_json = 3;

	enum ReqStat {
		NEW = 0; // new GUI instance with new configs
		REFRESH = 1; // 
		FETCH = 2;
		UPDATE = 3;
	}
}

/*
 * \class ErtlsStatusRequest
 * \brief eRTLS request description 
 */
message ErtlsStatusRequest {
       
	string user_login = 1;
	ReqType ertls_request_type = 2;  
}


enum ErtlsNodeType {
	ANCHOR = 0;
	TAG = 1;
	UNKNOWNTYPE = 100;
}


enum ErtlsTech {
	WIREPAS = 0;
	BLUETOOTH = 1;
	MULTITECH = 2;
	UWB = 3;
	UNKNOWNTECH = 100;
}


/*
 * \class ErtlsStatus
 * \brief description of a status information message
 */
message ErtlsStatus {

	string ertls_user_id = 1;
	string ertls_service_id = 2;
	Stat ertls_status_code = 3;
	string ertls_status_timestamp = 4;
	repeated string ertls_project_json_list = 5;
	ElaCommon.ElaError ela_error = 6;
	string epe_version = 7;
	
	enum Stat{
	AVAILABLE = 0;
	NOCONFIGS = 1;
	ONLINE = 2;
	}
}
