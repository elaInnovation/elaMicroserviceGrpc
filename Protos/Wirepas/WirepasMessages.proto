syntax = "proto3";
package ElaWirepas;

/* //////////////////////////////////////////////
 * /////////////////////// Generic Wirepas Message // from Wirepas
 */

/*
 * Generic Message definition
 */

message GenericMessage {
    WirepasMessage wirepas = 1;
}

/*
 * Wirepas implemented Message definition
 */
message WirepasMessage {
    StatusEvent status_event = 1;
    GetConfigsReq get_configs_req = 2;
    GetConfigsResp get_configs_resp = 3;
    SetConfigReq set_config_req = 4;
    SetConfigResp set_config_resp = 5;
    SendPacketReq send_packet_req = 6;
    SendPacketResp send_packet_resp = 7;
    PacketReceivedEvent packet_received_event = 8;
    GetGwInfoReq get_gateway_info_req = 15;
    GetGwInfoResp get_gateway_info_resp = 16;
}

/* //////////////////////////////////////////////
 * /////////////////////// Data Message definition
 */

/*
 * Request definition
 */
message SendPacketReq {
    RequestHeader header = 1;

    uint32 destination_address = 2;
    uint32 source_endpoint = 3;
    uint32 destination_endpoint = 4;
    uint32 qos = 5;
    bytes payload = 6;

    uint32 initial_delay_ms = 7;
    bool is_unack_csma_ca = 8;
    uint32 hop_limit = 9;
}

/*
 * Responce definition
 */
message SendPacketResp {
    ResponseHeader header = 1;
}

/*
 * Event definition
 */
message PacketReceivedEvent {
    EventHeader header = 1;

    uint32 source_address = 2;
    uint32 destination_address = 3;
    uint32 source_endpoint = 4;
    uint32 destination_endpoint = 5;
    uint32 travel_time_ms = 6;
    uint64 rx_time_ms_epoch = 7; // Reception time of the message on the gateway
    uint32 qos = 8;

    bytes payload = 9;
    uint32 payload_size = 10;

    uint32 hop_count = 11;
}

/* //////////////////////////////////////////////
 * /////////////////////// Global proto definition
 */

 message RequestHeader { 
    // Unique request id 
    uint64 req_id = 1; 
    // Sink id if relevant for request 
    string sink_id = 2; 
} 

message EventHeader {
    // Gw id that generated the event
    string gw_id = 1;
    // Sink id if relevant for event
    string sink_id = 2;
    // Random event id to help duplicate event filtering
    uint64 event_id = 3;
}

message ResponseHeader {
    // Same as in Request
    uint64 req_id = 1;
    // Gw id that handled the request
    string gw_id = 2;
    // Sink id if relevant for request
    string sink_id = 3;
    // Global result of request
    ErrorCode res = 4;
}

enum OnOffState {
    ON = 0;
    OFF = 1;
}

message FirmwareVersion {
    uint32 major = 1;
    uint32 minor = 2;
    uint32 maint = 3;
    uint32 dev = 4;
}

enum ErrorCode {
    OK = 0;
    INTERNAL_ERROR = 1;
    INVALID_SINK_ID = 2;
    INVALID_ROLE = 3;
    INVALID_NETWORK_ADDRESS = 4;
    INVALID_NETWORK_CHANNEL = 5;
    INVALID_CHANNEL_MAP = 6;
    INVALID_NETWORK_KEYS = 7;
    INVALID_AC_RANGE = 8;
    INVALID_SINK_STATE = 9;
    INVALID_DEST_ADDRESS = 10;
    INVALID_DEST_ENDPOINT = 11;
    INVALID_SRC_ENDPOINT = 12;
    INVALID_QOS = 13;
    INVALID_DATA_PAYLOAD = 14;
    INVALID_SCRATCHPAD = 15;
    INVALID_SCRATCHPAD_SIZE = 16;
    INVLAID_SEQUENCE_NUMBER = 17;
    INVALID_REBOOT_DELAY = 18;
    INVALID_DIAG_INTERVAL = 19;
    INVALID_APP_CONFIG = 20;
    INVALID_PARAM = 21;
    NO_SCRATCHPAD_PRESENT = 22;
    ACCESS_DENIED = 23;
    REQUEST_NEEDS_SINK_ID = 24;
    INVALID_MAX_HOP_COUNT = 25;
}

/* //////////////////////////////////////////////
 * /////////////////////// Config message definition
 */

 message NodeRole {
    enum BaseRole {
        SINK = 0;
        ROUTER = 1;
        NON_ROUTER = 2;
    }
    BaseRole role = 1;
    enum RoleFlags {
        LOW_LATENCY = 0;
        AUTOROLE = 1;
    }
    repeated RoleFlags flags = 2;
}

message AccessCycleRange {
    uint32 min_ms = 1;
    uint32 max_ms = 2;
}

message ChannelRange {
    uint32 min_channel = 1;
    uint32 max_channel = 2;
}

message AppConfigData {
    uint32 diag_interval_s = 1; // Diagnostics interval in seconds
    bytes app_config_data = 2; // App config data
    uint32 seq = 3;
}

message NetworkKeys {
    bytes cipher = 1;
    bytes authentication = 2;
}

message SinkReadConfig {
    // Local id to uniquely identify a sink on gateway
    string sink_id = 1;

    // Sink minimal config
    NodeRole node_role = 2;
    uint32 node_address = 3;
    uint64 network_address = 4;
    uint32 network_channel = 5;
    AppConfigData app_config = 6;
    uint32 channel_map = 7;
    bool are_keys_set = 8;
    AccessCycleRange current_ac_range = 9;

    // Read only parameters
    AccessCycleRange ac_limits = 10;
    uint32 max_mtu = 11;
    ChannelRange channel_limits = 12;
    uint32 hw_magic = 13;
    uint32 stack_profile = 14;
    uint32 app_config_max_size = 15;
    FirmwareVersion firmware_version = 16;

    // State of sink
    OnOffState sink_state = 17;
}

message SinkNewConfig {
    // Local id to uniquely identify a sink on gateway
    string sink_id = 1 /*[(nanopb).max_size = 128]*/;

    // Node minimal config
    NodeRole node_role = 2;
    uint32 node_address = 3;
    uint64 network_address = 4;
    uint32 network_channel = 5;
    AppConfigData app_config = 6;

    uint32 channel_map = 7;
    NetworkKeys keys = 8;
    AccessCycleRange current_ac_range = 9;

    // State of sink
    OnOffState sink_state = 10;
}

message GatewayInfo {
    // Current timestamp when GatewayInfo is generated
    // It is a unix timestamp in s since epoch
    uint64 current_time_s_epoch = 1;

    // Optional gateway name (gateway manufacturer specific)
    string gw_model = 2;

    // Optional gateway version (gateway manufacturer specific)
    string gw_version = 3;

    // API version implemented in the gateway
    // This field must be explicitely set from code and must be
    // the one defined in each released verion.
    // Current version is 1
    uint32 implemented_api_version = 4;
}

/*
 * Commands definition
 */

 message StatusEvent { 
    EventHeader header = 1; 
 
    uint32 version = 2; 
    OnOffState state = 3; 
} 

message GetConfigsReq {
    RequestHeader header = 1;
}

message GetConfigsResp {
    ResponseHeader header = 1;

    SinkReadConfig configs = 2; // Gateway may have multiple sinks
}

message SetConfigReq {
    RequestHeader header = 1;

    SinkNewConfig config = 2;
}

message SetConfigResp {
    ResponseHeader header = 1;

    // Send back the current config
    SinkReadConfig config = 2;
}

message GetGwInfoReq {
    RequestHeader header = 1;
}

message GetGwInfoResp {
    ResponseHeader header = 1;

    GatewayInfo info = 2;
}